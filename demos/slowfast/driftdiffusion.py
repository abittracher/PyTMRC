#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
A simple drift-diffusion system with explicit timescale separation.

dx = a1 + a1*dW
dy = a2*(0.5 - y)^2 + a2*dW
where a2 >> a1

Warning: this is NOT strictly a gradient system as the drift is not 
generated by a potential!
"""

# numerics imports
import numpy as np


class DriftDiffusion:
    
    def __init__(self, ystretch = 10):
        self.ystretch = ystretch
        

    def drift(self, t, x, a1 = 1e-3, a2 = 1e-1):
        """
        The drift of the system

        Parameters
        ----------
        t=0 : float
            evaluation time
        x : np.array
            array containing the evaluation points
        a1=1e-3 : float
            scale parameter of the x1-direction
        a2=1e-1 : float
            scale parameter of the x2-direction

        Output
        ------
        b : np.array
            drift vectors at the evaluation points
        """

        bx = a1*np.ones([1,x.shape[0]])
        by = -np.array(-a2*(.5-x[:,1]))
        
        b = np.vstack((bx,by)).transpose()
        return b


    def diffusion(self, t, x, a1 = 1e-3, a2 = 1e-1):
        """
        The diffusion of the system

        Parameters
        ----------
        t=0 : float
            evaluation time
        x : np.array
            array containing the evaluation points
        a1=1e-3 : float
            scale parameter of the x1-direction
        a2=1e-1 : float
            scale parameter of the x2-direction

        Output
        ------
        sigma : np.array
            diffusion matrices at the evaluation points
        """
        
        npoints = np.size(x,0)
        sysdim = np.size(x,1)

        A = np.array([[np.sqrt(a1),0],[0,np.sqrt(a2)]])
        
        sigma = np.tile(A, (npoints,1,1))

        return sigma